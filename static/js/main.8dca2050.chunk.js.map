{"version":3,"sources":["actions/setKeycounts.js","actions/constants.js","actions/setVideoTitle.js","actions/setComments.js","actions/setSentiments.js","components/Settings.js","actions/setSingleWordSentiments.js","actions/setHighestAndLowestCommentCount.js","components/Resizeobserver.js","components/Bubblechart.js","actions/setChoice.js","components/MaxComments.js","components/TitleStats.js","components/InfiniteScrollWindow.js","components/Display.js","App.js","reducers/sentiment.js","reducers/singleWordSentiments.js","reducers/index.js","reducers/videoTitle.js","reducers/keyCounts.js","reducers/comments.js","reducers/highestAndLowestCommentCount.js","reducers/choice.js","store/index.js","index.js"],"names":["setKeycounts","keyCounts","type","setVideoTitle","videoTitle","setComments","comments","setCommentCount","commentCount","Analyzer","require","SentimentAnalyzer","stemmer","PorterStemmer","keyword_extractor","apiKey","process","useStyles","makeStyles","theme","searchIcon","color","position","right","cursor","fontSize","getKeywords","keywords","i","length","extraction","extract","language","remove_digits","return_changed_case","remove_duplicates","push","countKeywords","uniqueKeywords","keyword","word","toLowerCase","indexOf","keyCount","findLikesForHighestAndLowestComment","highest","lowest","highestCommentLikes","lowestCommentLikes","comment","overallSentiment","analyzer","sentiments","parseFloat","sentimentCount","lowWords","highWords","tokenized","split","sentiSingle","j","obj","getSentiment","sentiment","isNaN","cleanComments","cleanedComments","getVideoTitle","ID","a","undefined","url","fetch","response","json","data","title","Settings","useState","videoLink","updateVideoLink","videoID","updateVideoID","dispatch","useDispatch","useEffect","link","equalSignIndex","search","slice","shortenToVideoID","calc","e","preventDefault","getComments","flat","sentimentCollector","highestComment","lowestComment","lowestSingleWords","highestSingleWords","highestLowest","highLowCommentCount","fetchComments","textArr","token","maxResults","nextPageToken","map","splitcomment","classes","className","placeholder","id","name","onChange","target","value","onClick","useResizeObserver","ref","dimensions","setDimensions","observeTarget","current","resizeObserver","ResizeObserver","entries","forEach","entry","contentRect","observe","unobserve","Bubblechart","dataSingleWords","svgRef","useRef","wrapperRef","Object","scoreValues","newEntries","Number","sort","b","scoreCount","window","innerWidth","filter","arr","heighestXEntries","cleanEntries","sentimentWordsCombined","category","keys","bubbles2Count","width","count","key","minValue","maxValue","choice","updateChoice","dataChoice","useCallback","minMaxNumbers","d3","svg","select","mouseEnter","selectAll","join","enter","append","attr","node","element","height","style","colorScale","colorScaleS","text","x","scaleOrdinal","domain","Set","range","scaleLinear","scaleBubbles","scaleL","scaleLS","xCenter","forceSimulation","force","forceManyBody","strength","d","forceCenter","forceCollide","radius","Math","abs","on","y","remove","handleChange","setChoice","document","getElementById","classList","add","Comments","styleHighest","styleLowest","average","useSelector","state","highestAndLowestCommentCount","output","heading","uuidv4","toString","reduce","generateSentimentField","TitleStats","indicator","sorted","values","reverse","InfiniteScrollWindow","commentsFiltered","setCommentsFiltered","positiveComments","setPositiveComments","negativeComments","setNegativeComments","positive","negative","filterComments","hasmoreItems","setHasmoreItems","pageStart","loadMore","hasMore","loader","useWindow","getScrollParent","getElementsByClassName","Display","singleWordSentiments","MaxComments","App","initialState","combineReducers","action","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.8dca2050.chunk.js","sourcesContent":["import { SET_KEYCOUNTS } from './constants'\r\n\r\nexport const setKeycounts = keyCounts => ({\r\n    type: SET_KEYCOUNTS,\r\n    keyCounts\r\n})","export const SET_VIDEO_TITLE = 'SET_VIDEO_TITLE'\r\nexport const SET_SENTIMENT = 'SET_SENTIMENT'\r\nexport const SET_SENTIMENT_COUNT = 'SET_SENTIMENT_COUNT'\r\nexport const SET_HIGHEST_COMMENT = 'SET_HIGHEST_COMMENT'\r\nexport const SET_LOWEST_COMMENT = 'SET_LOWEST_COMMENT'\r\nexport const SET_KEYCOUNTS = 'SET_KEYCOUNTS'\r\nexport const SET_COMMENT_COUNT = 'SET_COMMENT_COUNT'\r\nexport const SET_COMMENTS = 'SET_COMMENTS'\r\nexport const SET_HIGHEST_AND_LOWEST_COMMENT_COUNT = 'SET_HIGHEST_AND_LOWEST_COMMENT_COUNT'\r\nexport const SET_HIGHEST_SENTIMENT_SINGLE_WORDS = 'SET_HIGHEST_SENTIMENT_SINGLE_WORD'\r\nexport const SET_LOWEST_SENTIMENT_SINGLE_WORDS = 'SET_LOWEST_SENTIMENT_SINGLE_WORD'\r\nexport const SET_CHOICE = 'SET_CHOICE'","import { SET_VIDEO_TITLE } from './constants'\r\n\r\nexport const setVideoTitle = videoTitle => ({\r\n    type: SET_VIDEO_TITLE,\r\n    videoTitle\r\n})","import { SET_COMMENTS } from './constants'\r\n\r\nexport const setComments = comments => ({\r\n    type: SET_COMMENTS,\r\n    comments\r\n})","import { \r\n    SET_SENTIMENT, \r\n    SET_SENTIMENT_COUNT, \r\n    SET_HIGHEST_COMMENT, \r\n    SET_LOWEST_COMMENT,\r\n    SET_COMMENT_COUNT\r\n} from './constants'\r\n\r\nexport const setSentiment = sentiment => ({\r\n    type: SET_SENTIMENT,\r\n    sentiment\r\n})\r\n\r\nexport const setSentimentCount = sentimentCount => ({\r\n    type: SET_SENTIMENT_COUNT,\r\n    sentimentCount\r\n})\r\n\r\nexport const setHighestComment = highestComment => ({\r\n    type: SET_HIGHEST_COMMENT,\r\n    highestComment\r\n})\r\n\r\nexport const setLowestComment = lowestComment => ({\r\n    type: SET_LOWEST_COMMENT,\r\n    lowestComment\r\n})\r\n\r\nexport const setCommentCount = commentCount => ({\r\n    type: SET_COMMENT_COUNT,\r\n    commentCount\r\n})","import React, { useState, useEffect } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport SearchIcon from '@material-ui/icons/Search'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport { setKeycounts } from '../actions/setKeycounts'\r\nimport { setVideoTitle } from '../actions/setVideoTitle'\r\nimport { setComments } from '../actions/setComments'\r\nimport { setHighestAndLowestCommentCount } from '../actions/setHighestAndLowestCommentCount'\r\nimport { setHighestSingleWords, setLowestSingleWords } from '../actions/setSingleWordSentiments'\r\nimport { \r\n    setSentiment, \r\n    setSentimentCount, \r\n    setHighestComment, \r\n    setLowestComment, \r\n    setCommentCount\r\n} from '../actions/setSentiments'\r\n\r\nvar Analyzer = require('natural').SentimentAnalyzer\r\nvar stemmer = require('natural').PorterStemmer\r\nvar keyword_extractor = require(\"keyword-extractor\")\r\nlet apiKey = process.env.REACT_APP_API_KEY\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    searchIcon: {\r\n      color: 'rgba(128, 128, 128, 0.5)',\r\n      position: 'absolute',\r\n      right: '10px',\r\n      cursor: 'pointer',\r\n      fontSize: '2.25rem'\r\n    },\r\n}))\r\n\r\n// Gets english lang keywords with the help of keywordextractor from all the comments for bubblechar\r\nconst getKeywords = (comments) => {\r\n    let keywords = []\r\n\r\n    for(let i = 0; i < comments.length; i++) {\r\n        let extraction = keyword_extractor.extract(comments[i], {\r\n            language:\"english\",\r\n            remove_digits: true,\r\n            return_changed_case:true,\r\n            remove_duplicates: false\r\n        })\r\n        keywords.push(extraction)\r\n    }\r\n    return keywords\r\n}\r\n\r\n// Counts Keywords for the bubblechart comparsion\r\nconst countKeywords = (keywords) => {\r\n\r\n    // Get all the unique keywords\r\n    let uniqueKeywords = []\r\n    for(let i = 0; i < keywords.length; i++) {\r\n        for(let keyword of keywords[i]) {\r\n            if(keyword) {\r\n                let word = keyword.toLowerCase()    \r\n                uniqueKeywords.indexOf(word) === -1 && uniqueKeywords.push(word)\r\n            }\r\n        }\r\n    }\r\n\r\n    // Put all of them into an object an count them\r\n    let keyCount = {}\r\n    for(let i = 0; i < keywords.length; i++) {\r\n        for(let keyword of keywords[i]) {\r\n            keyCount[keyword] && keyCount[keyword]++\r\n            !keyCount[keyword] && (keyCount[keyword] = 1)\r\n        }\r\n    }\r\n\r\n    return keyCount\r\n}\r\n\r\n// Takes the highest and lowest comments and gets the like count\r\nconst findLikesForHighestAndLowestComment = (highest, lowest, comments) => {\r\n    let highestCommentLikes = 0\r\n    let lowestCommentLikes = 0\r\n    for(let comment of comments) {\r\n        if(comment[0] === highest[1]) {\r\n            highestCommentLikes = comment[1]\r\n        }\r\n        if(comment[0] === lowest[1]) {\r\n            lowestCommentLikes = comment[1]\r\n        }\r\n    }\r\n    return [highestCommentLikes, lowestCommentLikes]\r\n}\r\n\r\n// Goes through all the comments and finds words <= -1 or >= 1 and puts them in an array\r\n// Counts positive, neutral and negative comments\r\n// Finds the highest and lowest sentiment comments\r\n// Gets the overall sentiment\r\nconst overallSentiment = (comments) => {\r\n    let analyzer = new Analyzer(\"English\", stemmer, \"afinn\")\r\n    let length = comments.length\r\n    let sentiments = parseFloat(0)\r\n\r\n    // Counts POS and NEG comments POS/NEUTRAL/NEG\r\n    let sentimentCount = [0, 0, 0]\r\n\r\n    // Set highest and lowest commentscore\r\n    let highest = [-10, null]\r\n    let lowest = [10, null]\r\n\r\n    // Array of objects collecting words <= -1 or >= 1\r\n    let lowWords = []\r\n    let highWords = []\r\n\r\n    for(let i = 0; i < length; i++) {\r\n\r\n        // Split comment to words\r\n        let tokenized = comments[i].split(' ')\r\n\r\n        // Get the single word sentiments\r\n        let sentiSingle\r\n        for(let j = 0; j < tokenized.length; j++) {\r\n            sentiSingle = parseFloat(analyzer.getSentiment([tokenized[j]]))\r\n            let obj = {}\r\n            if(sentiSingle <= -1) {\r\n                obj['word'] = tokenized[j]\r\n                obj['sentiment'] = sentiSingle\r\n                lowWords.push(obj)\r\n            } else if(sentiSingle >= 1) {\r\n                obj['word'] = tokenized[j]\r\n                obj['sentiment'] = sentiSingle\r\n                highWords.push(obj)\r\n            }\r\n        }\r\n        \r\n        // Get the whole comments sentiment from here on\r\n        const sentiment = parseFloat(analyzer.getSentiment(tokenized))\r\n\r\n        // Add POS or NEG or NEUTRAL\r\n        sentiment > 0 && sentimentCount[2]++\r\n        sentiment === 0 && sentimentCount[1]++\r\n        sentiment < 0 && sentimentCount[0]++\r\n        \r\n        sentiment > highest[0] && (highest[0] = sentiment) && (highest[1] = comments[i])\r\n        sentiment < lowest[0] && (lowest[0] = sentiment) && (lowest[1] = comments[i])\r\n\r\n        // Sometimes NaN is returned so this prevents it from beeing added to the overall score\r\n        if(!isNaN(sentiment)) {\r\n            sentiments += sentiment\r\n        }\r\n    }\r\n    return [sentiments / length, sentimentCount, highest, lowest, lowWords, highWords]\r\n}\r\n\r\n// Takes the video link and returns the ID\r\nconst shortenToVideoID = (link) => {\r\n    const equalSignIndex = link.search('=')\r\n    const videoID = link.slice(equalSignIndex + 1)\r\n    return videoID\r\n}\r\n\r\n// Seperates the pure text from additional information wich are not needed in this step\r\nconst cleanComments = (comments) => {\r\n    let cleanedComments = []\r\n    for(let i = 0; i < comments.length; i++) {\r\n        cleanedComments.push(comments[i][0])\r\n    }\r\n    return cleanedComments\r\n}\r\n\r\n// Uses the noembed site to get the video title, reduces api cost\r\nconst getVideoTitle = async (ID) => {\r\n    if(ID && ID !== undefined) {\r\n        let url = `https://noembed.com/embed?url=https%3A%2F%2Fhttps://www.youtube.com/watch?v=${ID}`\r\n        const response = await fetch(url)   \r\n        const data = await response.json()\r\n        const title = await data['title']\r\n        return title\r\n    }\r\n    return null\r\n}\r\n\r\nfunction Settings() {\r\n\r\n    const [videoLink, updateVideoLink] = useState('')\r\n    const [videoID, updateVideoID] = useState()\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        // Get and Update Video ID\r\n        const ID = shortenToVideoID(videoLink)\r\n        updateVideoID(ID)\r\n    }, [videoLink])\r\n\r\n    // Main knot to get all needed information from the api\r\n    const calc = async (e) => {\r\n        e.preventDefault()\r\n\r\n        // Get and set Video Title\r\n        let videoTitle = await getVideoTitle(videoID)\r\n        dispatch(setVideoTitle(videoTitle))\r\n\r\n        // Get last 100 comments (YT always returns 100 if there are at least 100 comments)\r\n        let comments = await getComments()\r\n        if(comments.length === 0) return\r\n        comments = comments.flat()\r\n        dispatch(setComments(comments))\r\n\r\n        // Extract pure comments from [comment, likes, id]\r\n        let cleanedComments = cleanComments(comments)\r\n        let commentCount = cleanedComments.length\r\n        dispatch(setCommentCount(commentCount))\r\n\r\n        // Calculate the sentiment and update\r\n        let sentimentCollector = overallSentiment(cleanedComments)\r\n        dispatch(setSentiment(sentimentCollector[0]))\r\n        dispatch(setSentimentCount(sentimentCollector[1]))\r\n        dispatch(setHighestComment(sentimentCollector[2]))\r\n        dispatch(setLowestComment(sentimentCollector[3]))\r\n        dispatch(setLowestSingleWords(sentimentCollector[4]))\r\n        dispatch(setHighestSingleWords(sentimentCollector[5]))\r\n        \r\n        // Get and set the likes for the highest and lowest sentiment comments\r\n        let highestLowest = findLikesForHighestAndLowestComment(sentimentCollector[2], sentimentCollector[3], comments)\r\n        dispatch(setHighestAndLowestCommentCount(highestLowest))\r\n\r\n        // Get all the keywords from all the comments and count them\r\n        let keywords = getKeywords(cleanedComments)\r\n        let keyCounts = countKeywords(keywords)\r\n        dispatch(setKeycounts(keyCounts))\r\n    }\r\n\r\n    // Connection to the youtube API -> setup to get more then 100 comments (all the comments f.e.) but too much api cost atm\r\n    // \r\n    const getComments = () => {\r\n        let ID = videoID\r\n        let maxResults = 100\r\n        let analyzer = new Analyzer(\"English\", stemmer, \"afinn\")\r\n        \r\n        // Recursive Function to get each 100 comments\r\n        async function fetchComments(textArr = [], token) {\r\n\r\n            // If there are X comments already in array return array\r\n            if(textArr[0] !== undefined) {\r\n                \r\n                // Every array has 100 comments in it so maxResults / 100 >= textArr.length tests if the maxResult-propertie is fullfilled\r\n                if(maxResults / 100 >= textArr.length) {\r\n                    return textArr\r\n                }\r\n            }\r\n\r\n            // Change the url based on if there is a new nextPageToken or not\r\n            // Setup and working for future use but API cost was too high\r\n            let url\r\n            if(token) {\r\n                url = `https://www.googleapis.com/youtube/v3/commentThreads?key=${apiKey}&textFormat=plainText&part=snippet&videoId=${ID}&maxResults=${maxResults}&pageToken=${token}`\r\n            } else {\r\n                url = `https://www.googleapis.com/youtube/v3/commentThreads?key=${apiKey}&textFormat=plainText&part=snippet&videoId=${ID}&maxResults=${maxResults}`\r\n            }\r\n\r\n            // Grab the data and get comment and likecount for comment\r\n            const response = await fetch(url)    \r\n            const data = await response.json()\r\n            const nextPageToken = await data['nextPageToken']\r\n            let comments = await data['items']\r\n\r\n            // If the address was f.e. empty and there are no results just return []\r\n            if(!comments) return []\r\n\r\n            // Else put the comments and the likecount (not used yet) into an array\r\n            comments = comments.map(comment => {\r\n                const splitcomment = comment['snippet']['topLevelComment']['snippet']['textDisplay'].split(' ')\r\n                return [\r\n                    comment['snippet']['topLevelComment']['snippet']['textDisplay'],\r\n                    comment['snippet']['topLevelComment']['snippet']['likeCount'],\r\n                    comment['snippet']['topLevelComment']['snippet']['authorChannelId']['value'],\r\n                    analyzer.getSentiment(splitcomment),\r\n                    comment['snippet']['topLevelComment']['snippet']['authorChannelUrl']\r\n                ]\r\n            })\r\n\r\n            // Push data to array that is passed along\r\n            textArr.push(comments)\r\n\r\n            // If there is one more comment page to load grab the nextpagetoken for that site\r\n            // Not used as it eats the free api usage too quickly. Could grab all other comments\r\n            // If used\r\n            if(nextPageToken) {\r\n                return fetchComments(textArr, nextPageToken)\r\n            }\r\n\r\n            // Or else just return the array\r\n            else if(!nextPageToken) return textArr\r\n        }\r\n\r\n        return fetchComments([], null)\r\n    }\r\n\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <div className=\"settings\">\r\n            <form className=\"settings__form\">\r\n                <input \r\n                    placeholder=\"Enter Youtube Video Link...\" \r\n                    type=\"text\" \r\n                    id=\"video-link\" \r\n                    name=\"video-link\" \r\n                    onChange={e => updateVideoLink(e.target.value)} \r\n                    value={videoLink} \r\n                    className=\"settings__link-input\"\r\n                />\r\n                <SearchIcon className={classes.searchIcon} onClick={calc}/>\r\n            </form> \r\n            <button \r\n                onClick={calc} \r\n                value=\"Search\"\r\n                className=\"settings__search-button\"\r\n            >\r\n                    Search\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Settings\r\n","import { SET_HIGHEST_SENTIMENT_SINGLE_WORDS, SET_LOWEST_SENTIMENT_SINGLE_WORDS } from './constants'\r\n\r\nexport const setHighestSingleWords = highestSingleWords => ({\r\n    type: SET_HIGHEST_SENTIMENT_SINGLE_WORDS,\r\n    highestSingleWords\r\n})\r\n\r\nexport const setLowestSingleWords = lowestSingleWords => ({\r\n    type: SET_LOWEST_SENTIMENT_SINGLE_WORDS,\r\n    lowestSingleWords\r\n})","import { SET_HIGHEST_AND_LOWEST_COMMENT_COUNT } from './constants'\r\n\r\nexport const setHighestAndLowestCommentCount = highLowCommentCount => ({\r\n    type: SET_HIGHEST_AND_LOWEST_COMMENT_COUNT,\r\n    highLowCommentCount\r\n})","import ResizeObserver from \"resize-observer-polyfill\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nconst useResizeObserver = ref => {\r\n    const [dimensions, setDimensions] = useState(null);\r\n    useEffect(() => {\r\n      const observeTarget = ref.current;\r\n      const resizeObserver = new ResizeObserver(entries => {\r\n        entries.forEach(entry => {\r\n          setDimensions(entry.contentRect);\r\n        });\r\n      });\r\n      resizeObserver.observe(observeTarget);\r\n      return () => {\r\n        resizeObserver.unobserve(observeTarget);\r\n      };\r\n    }, [ref]);\r\n    return dimensions;\r\n};\r\n\r\nexport default useResizeObserver","import * as d3 from 'd3'\r\nimport { \r\n    select, \r\n    forceSimulation, \r\n    scaleOrdinal, \r\n    forceCollide, \r\n    forceManyBody, \r\n    forceCenter,\r\n    scaleLinear } from \"d3\"\r\nimport React, { useRef, useEffect, useState, useCallback } from \"react\"\r\nimport useResizeObserver from './Resizeobserver'\r\nimport { useDispatch } from 'react-redux'\r\nimport { setChoice } from '../actions/setChoice'\r\n\r\nfunction Bubblechart({ data, dataSingleWords }) {\r\n    const svgRef = useRef()\r\n    const wrapperRef = useRef()\r\n    const dimensions = useResizeObserver(wrapperRef)\r\n    const entries = Object.entries(data)\r\n    const alphabet = 'abcdefghijklmnopqrstuvwxyz1234567890'\r\n    const dispatch = useDispatch()\r\n\r\n    let scoreValues = []\r\n    const heighestXEntries = () => {\r\n\r\n        // Get all unique counts for a word and sort them\r\n        for(let entry of entries) {\r\n            if(scoreValues.indexOf(entry[1]) === -1) scoreValues.push(Number(entry[1]))\r\n        }\r\n        scoreValues.sort((a, b) => a - b)\r\n\r\n        // ScoreCount is the max number of bubbles for the bubblediagram\r\n        let scoreCount = 25\r\n        if(window.innerWidth < 700) scoreCount = 15\r\n\r\n        // goes backwards through the scores and pushes [word, count] into newEntries\r\n        let newEntries = []\r\n        for(let i = scoreValues.length; i > 0; i--) {\r\n            newEntries.push(...entries.filter(arr => {\r\n                return arr[1] === scoreValues[i] && arr\r\n            }))\r\n            if(newEntries.length >= scoreCount) break\r\n        }\r\n        return newEntries.slice(0, scoreCount)\r\n    }\r\n\r\n    let newEntries = heighestXEntries()\r\n\r\n    // Sorts the entries as object (for d3) into an array. Gets rid of single character mentions like = or -\r\n    let cleanEntries = []\r\n    for(let entry of newEntries) {\r\n        if(entry[1] > 1) {\r\n            if(alphabet.indexOf(entry[0][0]) === -1){\r\n                continue\r\n            }\r\n            let obj = {'word': null, 'amount': null}\r\n            obj['word'] = entry[0]\r\n            obj['amount'] = entry[1]\r\n            cleanEntries.push(obj)\r\n        }\r\n    }\r\n\r\n    // Merge Singlewordsentiments and assign category 0 or 1\r\n    let sentimentWordsCombined = []\r\n    let category = 0\r\n    let keys = Object.keys(dataSingleWords)\r\n\r\n    let bubbles2Count = 15\r\n    if(dimensions && dimensions.width <= 700) bubbles2Count = 10\r\n\r\n    let count = 0\r\n\r\n    for(let key of keys) {\r\n        for(let i = 0; i < dataSingleWords[key].length; i++) {\r\n            if(count < bubbles2Count) {\r\n                let obj = dataSingleWords[key][i]\r\n                obj['category'] = category\r\n                sentimentWordsCombined.push(obj)    \r\n                count++\r\n            }\r\n        }\r\n        count = 0\r\n        category++\r\n    }\r\n\r\n    // Base bubbles on choice of keywords or sentiment words\r\n    const [choice, updateChoice] = useState('keywords')\r\n    const dataChoice = useCallback(() => {\r\n        return choice === 'keywords' ? cleanEntries : sentimentWordsCombined\r\n    }, [choice, cleanEntries, sentimentWordsCombined])\r\n\r\n    // Gets the minValue and maxValue of word counts\r\n    let minValue\r\n    let maxValue\r\n\r\n    if(dataChoice().length !== 0) {\r\n        let minMaxNumbers = []\r\n        for(let entry of dataChoice()) {\r\n            minMaxNumbers.push(entry['amount' || 'sentiment'])\r\n        }\r\n        minValue = d3.min(minMaxNumbers)\r\n        maxValue = d3.max(minMaxNumbers)\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        let data = dataChoice()\r\n        if(!dimensions) return\r\n        let svg = null\r\n        svg = select(svgRef.current)\r\n\r\n        const mouseEnter = (value) => {\r\n            svg\r\n                .selectAll('.rec')\r\n                .data(() => {\r\n                    if(choice === 'sentiment') {\r\n                        return [[value['sentiment'], value['word']]]\r\n                    } else return [[value['amount'], value['word']]]\r\n                })\r\n                .join(enter => enter.append(\"rect\"))\r\n                .attr(\"class\", \"rec\")\r\n                .attr(\"x\", (node) => {\r\n                    for(let element of cleanEntries) {\r\n                        if(choice !== 'sentiment') {\r\n                            if(element['word'] === node[1]){\r\n                                if(dimensions.width <= 700) {\r\n                                    return dimensions.width / 2 - 175\r\n                                }else return element['x'] + 100\r\n                            }   \r\n                        } else return dimensions.width / 2 - (node[1].length * 4 + 150)\r\n                    }\r\n                })\r\n                .attr('width', node => {\r\n                    return `${node[1].length * 4 + 300}px`\r\n                })\r\n                .attr('height', '40px')\r\n                .attr(\"text-anchor\", \"middle\")\r\n                .attr(\"y\", (node) => {\r\n                    for(let element of cleanEntries) {\r\n                        if(choice !== 'sentiment') {\r\n                            if(element['word'] === node[1]){\r\n                                return element['y']\r\n                            }     \r\n                        } else return dimensions.height / 2\r\n                    }\r\n                })\r\n                .attr(\"opacity\", 1)\r\n                .attr('fill', 'white')\r\n                .style('stroke', node => {\r\n                    if(choice !== 'sentiment') {\r\n                        return colorScale(node[0])\r\n                    } else {\r\n                        return colorScaleS(node[0])\r\n                    }\r\n                })\r\n                .style('stroke-width', 2)\r\n                .attr(\"rx\", 4)\r\n            svg\r\n                .selectAll(\".tooltip\")\r\n                .data(() => {\r\n                    if(choice === 'sentiment') {\r\n                        return [[value['sentiment'], value['word']]]\r\n                    } else return [[value['amount'], value['word']]]\r\n                })\r\n                .join(enter => enter.append(\"text\"))\r\n                .attr(\"class\", \"tooltip\")\r\n                .text(node => {\r\n                    if(choice === 'sentiment') {\r\n                        return `sentiment: ${node[0]}, word: \"${node[1]}\"`\r\n                    }else return `${node[0]} times used: \"${node[1]}\"`\r\n                })\r\n                .attr(\"x\", (node) => {\r\n                    let x = dimensions.width / 2\r\n                    for(let element of cleanEntries) {\r\n                        if(element['word'] === node[1]){\r\n                            if(choice !== 'sentiment') {\r\n                                if(dimensions.width <= 700) {\r\n                                    x = dimensions.width / 2\r\n                                } else x = element['x'] + node[1].length * 4 + 200    \r\n                            } else x = dimensions.width / 2\r\n                        } \r\n                    }\r\n                    return x\r\n                })\r\n                .attr(\"text-anchor\", \"middle\")\r\n                .attr(\"y\", (node) => {\r\n                    for(let element of cleanEntries) {\r\n                        if(choice !== 'sentiment') {\r\n                            if(element['word'] === node[1]){\r\n                                return element['y'] + 25\r\n                            } \r\n                        } else return dimensions.height / 2 + 25\r\n                    }\r\n                })\r\n                .attr(\"opacity\", 1)\r\n                .attr('fill', 'black')\r\n        }\r\n        // Colors for Bubbles\r\n        const colorScale = scaleOrdinal()\r\n            .domain(new Set(scoreValues))\r\n            .range([\"#00e8e8\", \"#F2CB05\", \"#F28705\", \"#D92818\", \"#D94141\", \"#0ba3ff\", \"#6aafda\"])\r\n\r\n        const colorScaleS = scaleLinear()\r\n            .domain([-2, 2])\r\n            .range(['rgb(217, 29, 0)', 'rgb(66, 230, 0)'])\r\n\r\n        // Determines the scale based on screen size\r\n        let scaleBubbles = 1.3\r\n        if(dimensions.width <= 700) scaleBubbles = .8\r\n\r\n        // Scale for bubbles using scale var\r\n        const scaleL = d3.scaleSqrt()\r\n            .domain([minValue, maxValue])\r\n            .range([25 * scaleBubbles, 60 * scaleBubbles])\r\n        \r\n        let scaleBubblesS = 2\r\n\r\n        const scaleLS = d3.scaleSqrt()\r\n            .domain([0, 5])\r\n            .range([0 * scaleBubblesS, 25 * scaleBubblesS])\r\n        svg\r\n            .style(\"width\", '100%')\r\n            .style(\"height\", '100%')\r\n\r\n        svg.attr('viewbox', `0 0 ${dimensions.width} ${dimensions.height}`)\r\n\r\n        const xCenter = [dimensions.width / 4, dimensions.width - dimensions.width / 4]\r\n\r\n        const simulationBubbles = () => {\r\n            if(choice === 'countries') return\r\n            forceSimulation(data)\r\n                .force(\"charge\", forceManyBody().strength(20))\r\n                .force('x', choice === 'sentiment' ? d3.forceX().x(d => {\r\n                    if(choice === 'sentiment') {\r\n                        return d['category'] === 0 ? xCenter[0] : xCenter[1]    \r\n                    }}) : null \r\n                )\r\n                .force('center', forceCenter(dimensions.width / 2, dimensions.height  / 2))\r\n                .force(\"collide\", forceCollide().radius(node => {\r\n                    if(choice === 'sentiment') {\r\n                        return scaleLS(Math.abs(Number(node['sentiment'])))\r\n                    } else return scaleL(node['amount'])\r\n                }))\r\n                .on('tick', () => {\r\n                    svg\r\n                        .selectAll('.node')\r\n                        .data(data)\r\n                        .join('circle')\r\n                        .attr('class', 'node')\r\n                        .attr('r', node => {\r\n                            if(choice === 'sentiment') {\r\n                                return scaleLS(Math.abs(Number(node['sentiment'])))\r\n                            } else return scaleL(node['amount'])\r\n                        })\r\n                        .style('fill', node => {\r\n                            if(choice === 'sentiment') {\r\n                                return colorScaleS(node['sentiment'])\r\n                            }else return colorScale(node['amount'])\r\n                        })\r\n                        .attr('cx', node => node.x)\r\n                        .attr('cy', node => node.y)\r\n                        .on(\"mouseenter\", (value) => {\r\n                            mouseEnter(value)\r\n                        })\r\n                        .on(\"mouseleave\", () => {\r\n                            svg.selectAll(\".tooltip\").remove()\r\n                            svg.selectAll('.rec').remove()\r\n                        })\r\n                    svg\r\n                        .selectAll('.label')\r\n                        .data(data)\r\n                        .join('text')\r\n                        .attr('class', 'label')\r\n                        .attr('text-anchor', 'middle')\r\n                        .attr('font-size', node => {\r\n                            if(choice === 'sentiment') {\r\n                                return scaleLS(Math.abs(node['sentiment'])) / 3\r\n                            } else return scaleL(node['amount']) / 3\r\n                        })\r\n                        .attr('font-family', 'Open Sans')\r\n                        .style('fill', 'black')\r\n                        .attr('font-weight', '600')\r\n                        .text(node => {\r\n                            return node['word']\r\n                        })\r\n                        .attr('x', node => node.x)\r\n                        .attr('y', node => node.y)\r\n                        .on(\"mouseenter\", (value) => {\r\n                            mouseEnter(value)\r\n                        })\r\n\r\n            })\r\n        }\r\n\r\n        simulationBubbles()\r\n\r\n    }, [dimensions, cleanEntries, data, maxValue, minValue, scoreValues, dataChoice, choice, bubbles2Count])\r\n\r\n\r\n    const handleChange = (e) => {\r\n        e.preventDefault()\r\n        updateChoice(e.target.value)\r\n\r\n        dispatch(setChoice(e.target.value))\r\n\r\n        const id = e.target.id\r\n        const el = document.getElementById(id)\r\n        el.classList.add('bubblechart__difficulty-select--selected')\r\n\r\n        if(id === 'compare-sentiment') {\r\n            document.getElementById('keywords').classList.remove('bubblechart__difficulty-select--selected')\r\n            //document.getElementById('countries').classList.remove('selected')\r\n        } else if(id === 'keywords') {\r\n            //document.getElementById('countries').classList.remove('selected')\r\n            document.getElementById('compare-sentiment').classList.remove('bubblechart__difficulty-select--selected')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div ref={wrapperRef} className=\"bubblechart\">\r\n            <div className=\"bubblechart__select-menue\">\r\n                <button className=\"bubblechart__difficulty-select bubblechart__difficulty-select--selected\" value=\"keywords\" id=\"keywords\" onClick={e=> handleChange(e)}>Keywords</button>\r\n                <button className=\"bubblechart__difficulty-select\" value=\"sentiment\" id=\"compare-sentiment\" onClick={e=> handleChange(e)}>Compare Sentiments</button>\r\n                {/* <button className=\"difficulty_select\" value=\"countries\" id=\"countries\" onClick={e=> handleChange(e)}>Per Country</button> */}\r\n            </div>\r\n            <svg ref={svgRef}>\r\n\r\n            </svg>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Bubblechart","import { SET_CHOICE } from './constants'\r\n\r\nexport const setChoice = choice => ({\r\n    type: SET_CHOICE,\r\n    choice\r\n})","import React from 'react'\r\nimport { scaleLinear } from \"d3\"\r\nimport { useSelector } from 'react-redux'\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nfunction Comments({ lowestComment, highestComment, sentiment, sentimentCount }) {\r\n\r\n    const colorScale = scaleLinear()\r\n        .domain([-2, 2])\r\n        .range(['rgb(238, 0, 0)', 'rgb(66, 230, 0)'])\r\n\r\n    const styleHighest = {\r\n        color: colorScale(highestComment[0])\r\n    }\r\n\r\n    const styleLowest = {\r\n        color: colorScale(lowestComment[0])\r\n    }\r\n\r\n    const average = {\r\n        color: colorScale(sentiment)\r\n    }\r\n\r\n    const highestCommentLikes = useSelector(state => state.highestAndLowestCommentCount[0])\r\n    const lowestCommentLikes = useSelector(state => state.highestAndLowestCommentCount[1])\r\n\r\n    const generateSentimentField = () => {\r\n        const headings = ['Highest Sentiment', 'Lowest Sentiment', 'Average Sentiment']\r\n        let output = []\r\n        for(let heading of headings) {\r\n            output.push(\r\n                <div className=\"card\" key={uuidv4()}>\r\n                    <span className=\"card__heading\">\r\n                        <h2 className=\"card__heading-title\">{heading}</h2>\r\n                        <div \r\n                            className=\"card__heading-sentiment\" \r\n                            style={\r\n                                heading === 'Lowest Sentiment' ? \r\n                                styleLowest : heading === 'Highest Sentiment' ? \r\n                                styleHighest : average}>\r\n                            {   \r\n                                heading === 'Highest Sentiment' ? \r\n                                highestComment && (highestComment[0] > 0 ? '+' : '') + highestComment[0].toString().slice(0, 5) :\r\n                                heading === 'Lowest Sentiment' ?\r\n                                lowestComment && (lowestComment[0] > 0 ? '+' : '') + lowestComment[0].toString().slice(0, 5) :\r\n                                (sentiment > 0 ? '+' : '') + sentiment.toString().slice(0, 4)\r\n                            }\r\n                        </div>\r\n                    </span>\r\n                    {\r\n                        heading === 'Highest Sentiment' || heading === 'Lowest Sentiment' ?\r\n                        (\r\n                            <div className=\"card__sentiment\">\r\n                                {\r\n                                    heading === 'Highest Sentiment' ? \r\n                                    `\"${highestComment[1]}\"` : heading === 'Lowest Sentiment' ? \r\n                                    `\"${lowestComment[1]}\"` : null\r\n                                }\r\n                            </div>\r\n                        ) : null\r\n                    }\r\n                    {\r\n                        heading === 'Average Sentiment' ? \r\n                        (\r\n                            <div className=\"card__average\">\r\n                                <h6 className=\"card__average-sentiment\">\r\n                                    Negative Sentiments: {sentimentCount[0]}\r\n                                </h6>\r\n                                <h6 className=\"card__average-sentiment\">\r\n                                    Neutral Sentiments: {sentimentCount[1]}\r\n                                </h6>\r\n                                <h6 className=\"card__average-sentiment\">\r\n                                    Positive Sentiments: {sentimentCount[2]}\r\n                                </h6>\r\n                            </div>\r\n                        ) : null\r\n                    }\r\n                    {\r\n                        heading === 'Lowest Sentiment' ? \r\n                        (\r\n                            <div className=\"card__comment-likes\">\r\n                                Likes: \r\n                                {lowestCommentLikes}\r\n                            </div>\r\n                        ) : heading === 'Highest Sentiment' ?\r\n                        (\r\n                            <div className=\"card__comment-likes\">\r\n                                Likes: \r\n                                {highestCommentLikes}\r\n                            </div>\r\n                        ) : (\r\n                            <div className=\"card__comment-likes\">\r\n                                Comments: {sentimentCount.reduce((a, b) => a + b)}\r\n                            </div>\r\n                        )\r\n                    }\r\n                </div>\r\n            )\r\n        }\r\n        return output\r\n    }\r\n\r\n    return (\r\n        <div className=\"comments\">\r\n            {generateSentimentField()}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Comments\r\n","import React from 'react'\r\n\r\nfunction TitleStats({videoTitle, sentimentCount}) {\r\n\r\n    return (\r\n        <div className=\"display__title-stats\">\r\n            <h2 className=\"display__title-name\">{videoTitle}</h2>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TitleStats\r\n","import React, { useState, useEffect } from 'react'\r\nimport { useSelector} from 'react-redux'\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\n\r\n\r\n// Kinda working but needs work\r\nconst sort = (comments, indicator) => {\r\n    let sorted = []\r\n    let values = []\r\n\r\n    for(let comment of comments) {\r\n        values.push(comment[3])\r\n    }\r\n\r\n    if(indicator === '+') {\r\n        values = values.sort((a, b) => a - b).reverse()    \r\n    } else {\r\n        values = values.sort((a, b) => a - b)\r\n    }\r\n    \r\n    for(let value of values) {\r\n        for(let comment of comments) {\r\n            if(comment[3] === value) {\r\n                sorted.push(comment)\r\n            }\r\n        }\r\n    }\r\n\r\n    return sorted\r\n}\r\n\r\nconst filterComments = (comments) => {\r\n    let positive = []\r\n    let negative = []\r\n    for(let comment of comments) {\r\n        if(comment[3] > 0) {\r\n            positive.push(comment)\r\n        } else if(comment[3] < 0) {\r\n            negative.push(comment)\r\n        }\r\n    }\r\n\r\n    positive = sort(positive, '+')\r\n    negative = sort(negative, '-')\r\n\r\n    return [positive, negative]\r\n}\r\n\r\nfunction InfiniteScrollWindow() {\r\n\r\n    let comments = useSelector(state => state.comments)\r\n    let [commentsFiltered, setCommentsFiltered] = useState()\r\n    let [positiveComments, setPositiveComments] = useState()\r\n    let [negativeComments, setNegativeComments] = useState()\r\n\r\n    useEffect(() => {\r\n        setCommentsFiltered(filterComments(comments))\r\n    }, [comments])\r\n\r\n    useEffect(() => {\r\n        commentsFiltered && setPositiveComments(commentsFiltered[0].slice(0, 10))\r\n        commentsFiltered && setNegativeComments(commentsFiltered[1].slice(0, 10))\r\n    }, [commentsFiltered])\r\n\r\n    const [hasmoreItems, setHasmoreItems] = useState(true)\r\n    \r\n    const loadMorePositive = () => {\r\n        let count = positiveComments.length + 5\r\n        if(count >= commentsFiltered[0].length) {\r\n            setHasmoreItems(false)\r\n            return\r\n        }\r\n        setPositiveComments(commentsFiltered[0].slice(0, count))\r\n    }\r\n\r\n    const loadMoreNegative = () => {\r\n        let count = negativeComments.length + 5\r\n        if(count >= commentsFiltered[1].length) {\r\n            setHasmoreItems(false)\r\n            return\r\n        }\r\n        setNegativeComments(commentsFiltered[1].slice(0, count))\r\n    }\r\n\r\n    if(!positiveComments || !negativeComments) return null\r\n\r\n    return (\r\n        <div className=\"infinite-wrapper\">\r\n            <div className=\"infinite-scroll\">\r\n                <h2 className=\"infinite-scroll__heading\">\r\n                    Selected positive sentiments:\r\n                </h2>\r\n                <InfiniteScroll\r\n                    className=\"infinite-scroll__wrapper\"\r\n                    pageStart={0}\r\n                    loadMore={ loadMorePositive }\r\n                    hasMore={hasmoreItems}\r\n                    loader={<div className=\"loader\" key={0}>Loading ...</div>}\r\n                    useWindow={false}\r\n                    getScrollParent={() => document.getElementsByClassName('infinite-scroll')[0]}\r\n                >\r\n                    { \r\n                        positiveComments && positiveComments.map(comment => {\r\n                            return (\r\n                                <div className=\"comment\" key={uuidv4()}>\r\n                                    <div className=\"comment__text\">{`\"${comment[0]}\"`}</div>\r\n                                    <div className=\"comment__sentiment\">{comment[3].toString().slice(0, 6)}</div>\r\n                                </div>\r\n                            )\r\n                        })\r\n                    }\r\n                </InfiniteScroll>\r\n            </div>\r\n            <div className=\"infinite-scroll\">\r\n                <h2 className=\"infinite-scroll__heading\">\r\n                    Selected negative sentiments:\r\n                </h2>\r\n                <InfiniteScroll\r\n                    className=\"infinite-scroll__wrapper\"\r\n                    pageStart={0}\r\n                    loadMore={ loadMoreNegative }\r\n                    hasMore={hasmoreItems}\r\n                    loader={<div className=\"loader\" key={0}>Loading ...</div>}\r\n                    useWindow={false}\r\n                    getScrollParent={() => document.getElementsByClassName('infinite-scroll')[1]}\r\n                >\r\n                    { \r\n                        negativeComments && negativeComments.map(comment => {\r\n                            return (\r\n                                <div className=\"comment\" key={uuidv4()}>\r\n                                    <div className=\"comment__text\">{`\"${comment[0]}\"`}</div>\r\n                                    <div className=\"comment__sentiment\">{comment[3].toString().slice(0, 6)}</div>\r\n                                </div>\r\n                            )\r\n                        })\r\n                    }\r\n                </InfiniteScroll>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InfiniteScrollWindow\r\n","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport Bubblechart from './Bubblechart'\r\nimport MaxComments from './MaxComments'\r\nimport TitleStats from './TitleStats'\r\nimport InfiniteScrollWindow from './InfiniteScrollWindow'\r\n\r\nfunction Display() {\r\n\r\n    const sentiment = useSelector(state => state.sentiment.sentiment)\r\n    const sentimentCount = useSelector(state => state.sentiment.sentimentCount)\r\n    const highestComment = useSelector(state => state.sentiment.highestComment)\r\n    const lowestComment = useSelector(state => state.sentiment.lowestComment)\r\n    const videoTitle = useSelector(state => state.videoTitle)\r\n    const keyCounts = useSelector(state => state.keyCounts)\r\n    const singleWordSentiments = useSelector(state => state.singleWordSentiments)\r\n\r\n    if(!sentiment) return null\r\n    return (\r\n        <div className=\"display\">\r\n            <TitleStats videoTitle={videoTitle} />\r\n            <MaxComments \r\n                sentimentCount={sentimentCount} \r\n                lowestComment={lowestComment} \r\n                highestComment={highestComment} \r\n                sentiment={sentiment} \r\n            />\r\n            <InfiniteScrollWindow />\r\n            <Bubblechart data={keyCounts} dataSingleWords={singleWordSentiments}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Display\r\n","import React from 'react'\nimport Settings from './components/Settings'\nimport Display from './components/Display'\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <h1 className=\"app__page-title\">Consensus</h1>\n      <p className=\"app__subheading\">AFINN Youtube Sentiment Analysis</p>\n      <Settings />\n      <Display />\n    </div>\n  );\n}\n\nexport default App;\n","import { \r\n    SET_SENTIMENT, \r\n    SET_SENTIMENT_COUNT, \r\n    SET_HIGHEST_COMMENT, \r\n    SET_LOWEST_COMMENT, \r\n    SET_COMMENT_COUNT\r\n} from '../actions/constants'\r\n\r\nconst initialState = {\r\n    sentiment: 0,\r\n    sentimentCount: [null, null],\r\n    highestComment: '',\r\n    lowestComment: '',\r\n    commentCount: 0\r\n}\r\n\r\nexport const sentiment = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case SET_SENTIMENT:\r\n            return {\r\n                ...state,\r\n                sentiment: action.sentiment\r\n            }\r\n        case SET_SENTIMENT_COUNT:\r\n            return {\r\n                ...state,\r\n                sentimentCount: action.sentimentCount\r\n            }\r\n        case SET_HIGHEST_COMMENT:\r\n            return {\r\n                ...state,\r\n                highestComment: action.highestComment\r\n            }\r\n        case SET_LOWEST_COMMENT:\r\n            return {\r\n                ...state,\r\n                lowestComment: action.lowestComment\r\n            }\r\n        case SET_COMMENT_COUNT:\r\n            return {\r\n                ...state,\r\n                commentCount: action.commentCount\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import { \r\n    SET_HIGHEST_SENTIMENT_SINGLE_WORDS, \r\n    SET_LOWEST_SENTIMENT_SINGLE_WORDS\r\n} from '../actions/constants'\r\n\r\nconst initialState = {\r\n    highestSingleWords: [],\r\n    lowestSingleWords: []\r\n}\r\n\r\nexport const singleWordSentiments = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case SET_HIGHEST_SENTIMENT_SINGLE_WORDS:\r\n            return {\r\n                ...state,\r\n                highestSingleWords: action.highestSingleWords\r\n            }\r\n        case SET_LOWEST_SENTIMENT_SINGLE_WORDS:\r\n            return {\r\n                ...state,\r\n                lowestSingleWords: action.lowestSingleWords\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import { combineReducers } from 'redux'\r\nimport { videoTitle } from './videoTitle'\r\nimport { sentiment } from './sentiment'\r\nimport { keyCounts } from './keyCounts'\r\nimport { comments } from './comments'\r\nimport { highestAndLowestCommentCount } from './highestAndLowestCommentCount'\r\nimport { singleWordSentiments } from './singleWordSentiments'\r\nimport { choice } from './choice'\r\n\r\nexport default combineReducers({\r\n    videoTitle,\r\n    sentiment,\r\n    keyCounts,\r\n    comments,\r\n    highestAndLowestCommentCount,\r\n    singleWordSentiments,\r\n    choice\r\n})","import { SET_VIDEO_TITLE } from '../actions/constants'\r\n\r\nexport const videoTitle = (state = '', action) => {\r\n    switch(action.type) {\r\n        case SET_VIDEO_TITLE:\r\n            return action.videoTitle\r\n        default:\r\n            return state\r\n    }\r\n}","import { SET_KEYCOUNTS } from '../actions/constants'\r\n\r\nexport const keyCounts = (state = {}, action) => {\r\n    switch(action.type) {\r\n        case SET_KEYCOUNTS:\r\n            return action.keyCounts\r\n        default:\r\n            return state\r\n    }\r\n}","import { SET_COMMENTS } from '../actions/constants'\r\n\r\nexport const comments = (state = {}, action) => {\r\n    switch(action.type) {\r\n        case SET_COMMENTS:\r\n            return action.comments\r\n        default:\r\n            return state\r\n    }\r\n}","import { SET_HIGHEST_AND_LOWEST_COMMENT_COUNT } from '../actions/constants'\r\n\r\nexport const highestAndLowestCommentCount = (state = {}, action) => {\r\n    switch(action.type) {\r\n        case SET_HIGHEST_AND_LOWEST_COMMENT_COUNT:\r\n            return action.highLowCommentCount\r\n        default:\r\n            return state\r\n    }\r\n}","import { SET_CHOICE } from '../actions/constants'\r\n\r\nexport const choice = (state = 'keywords', action) => {\r\n    switch(action.type) {\r\n        case SET_CHOICE:\r\n            return action.choice\r\n        default:\r\n            return state\r\n    }\r\n}","import { createStore, applyMiddleware } from 'redux'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport thunk from 'redux-thunk'\r\nimport rootReducer from '../reducers'\r\n\r\nconst initialState = {}\r\n\r\nconst middleware = [thunk]\r\n\r\nconst store = createStore(rootReducer, initialState, composeWithDevTools(applyMiddleware(...middleware)))\r\n\r\nexport default store","import 'react-app-polyfill/ie9'\nimport 'react-app-polyfill/stable'\nimport \"core-js/stable\"\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport store from './store'\nimport { Provider } from 'react-redux'\nimport './styles/main.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}