{"version":3,"sources":["actions/setSentiments.js","actions/constants.js","actions/setKeycounts.js","actions/setVideoTitle.js","components/Settings.js","components/Resizeobserver.js","components/Bubblechart.js","components/MaxComments.js","components/AverageSentiment.js","components/Display.js","App.js","serviceWorker.js","reducers/sentiment.js","reducers/index.js","reducers/videoTitle.js","reducers/keyCounts.js","store/index.js","index.js"],"names":["setSentiment","sentiment","type","setSentimentCount","sentimentCount","setHighestComment","highestComment","setLowestComment","lowestComment","setCommentCount","commentCount","setKeycounts","keyCounts","setVideoTitle","videoTitle","Analyzer","require","SentimentAnalyzer","stemmer","PorterStemmer","keyword_extractor","apiKey","process","useStyles","makeStyles","theme","searchIcon","color","position","right","cursor","getKeywords","comments","keywords","i","length","extraction","extract","language","remove_digits","return_changed_case","remove_duplicates","push","countKeywords","uniqueKeywords","keyword","word","toLowerCase","indexOf","keyCount","overallSentiment","analyzer","sentiments","parseFloat","highest","lowest","tokenized","split","getSentiment","isNaN","cleanComments","cleanedComments","getVideoTitle","ID","a","undefined","url","fetch","response","json","data","title","Settings","useState","videoLink","updateVideoLink","videoID","updateVideoID","dispatch","useDispatch","useEffect","link","equalSignIndex","search","slice","shortenToVideoID","calc","e","preventDefault","getComments","flat","sentimentCollector","fetchComments","textArr","token","maxSearchLength","nextPageToken","map","comment","text","classes","className","placeholder","id","name","onChange","target","value","onClick","useResizeObserver","ref","dimensions","setDimensions","observeTarget","current","resizeObserver","ResizeObserver","entries","forEach","entry","contentRect","observe","unobserve","Bubblechart","minValue","maxValue","svgRef","useRef","wrapperRef","Object","scoreValues","newEntries","sort","scoreCount","window","innerWidth","counter","filter","arr","heighest10Entries","cleanEntries","obj","minMaxNumbers","keys","join","d3","hierarchy","descendants","svg","select","colorScale","scaleOrdinal","domain","Set","range","scaleBubbles","width","scaleL","style","attr","height","forceSimulation","force","forceManyBody","strength","forceCollide","radius","d","element","forceCenter","on","selectAll","node","x","y","toUpperCase","MaxComments","scaleLinear","styleHighest","console","log","styleLowest","toString","AverageSentiment","Display","useSelector","state","App","Boolean","location","hostname","match","initialState","combineReducers","action","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gpDAQaA,EAAe,SAAAC,GAAS,MAAK,CACtCC,KCRyB,gBDSzBD,cAGSE,EAAoB,SAAAC,GAAc,MAAK,CAChDF,KCZ+B,sBDa/BE,mBAGSC,EAAoB,SAAAC,GAAc,MAAK,CAChDJ,KChB+B,sBDiB/BI,mBAGSC,EAAmB,SAAAC,GAAa,MAAK,CAC9CN,KCpB8B,qBDqB9BM,kBAGSC,EAAkB,SAAAC,GAAY,MAAK,CAC5CR,KCvB6B,oBDwB7BQ,iBE5BSC,EAAe,SAAAC,GAAS,MAAK,CACtCV,KDEyB,gBCDzBU,cCFSC,EAAgB,SAAAC,GAAU,MAAK,CACxCZ,KFH2B,kBEI3BY,eCcAC,EAAWC,EAAQ,KAAWC,kBAC9BC,EAAUF,EAAQ,KAAWG,cAC7BC,EAAoBJ,EAAQ,KAC5BK,EAASC,0CAEPC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,WAAY,CACVC,MAAO,2BACPC,SAAU,WACVC,MAAO,OACPC,OAAQ,eAIRC,EAAc,SAACC,GAGjB,IAFA,IAAIC,EAAW,GAEPC,EAAI,EAAGA,EAAIF,EAASG,OAAQD,IAAK,CACrC,IAAIE,EAAahB,EAAkBiB,QAAQL,EAASE,GAAI,CACpDI,SAAS,UACTC,eAAe,EACfC,qBAAoB,EACpBC,mBAAmB,IAEvBR,EAASS,KAAKN,GAElB,OAAOH,GAGLU,EAAgB,SAACV,GAInB,IADA,IAAIW,EAAiB,GACbV,EAAI,EAAGA,EAAID,EAASE,OAAQD,IAAK,CAAC,IAAD,gBAClBD,EAASC,IADS,IACrC,IAAI,EAAJ,qBAAgC,CAAC,IAAzBW,EAAwB,QAC5B,GAAGA,EAAS,CACR,IAAIC,EAAOD,EAAQE,eACe,IAAlCH,EAAeI,QAAQF,IAAgBF,EAAeF,KAAKI,KAJ9B,+BAWzC,IAFA,IAAIG,EAAW,GAEPf,EAAI,EAAGA,EAAID,EAASE,OAAQD,IAAK,CAAC,IAAD,gBAClBD,EAASC,IADS,IACrC,IAAI,EAAJ,qBAAgC,CAAC,IAAzBW,EAAwB,QAC5BI,EAASJ,IAAYI,EAASJ,MAC7BI,EAASJ,KAAaI,EAASJ,GAAW,IAHV,+BAOzC,OAAOI,GAGLC,EAAmB,SAAClB,GActB,IAZA,IAAImB,EAAW,IAAIpC,EAAS,UAAWG,EAAS,SAC5CiB,EAASH,EAASG,OAClBiB,EAAaC,WAAW,GAGxBjD,EAAiB,CAAC,EAAG,GAIrBkD,EAAU,EAAE,GAAI,MAChBC,EAAS,CAAC,GAAI,MAEVrB,EAAI,EAAGA,EAAIC,EAAQD,IAAK,CAG5B,IAAIsB,EAAYxB,EAASE,GAAGuB,MAAM,KAC5BxD,EAAYoD,WAAWF,EAASO,aAAaF,IAGnDvD,EAAY,GAAKG,EAAe,KAChCH,EAAY,GAAKG,EAAe,KAEhCH,EAAYqD,EAAQ,KAAOA,EAAQ,GAAKrD,KAAeqD,EAAQ,GAAKtB,EAASE,IAC7EjC,EAAYsD,EAAO,KAAOA,EAAO,GAAKtD,KAAesD,EAAO,GAAKvB,EAASE,IAGtEyB,MAAM1D,KACNmD,GAAcnD,GAGtB,MAAO,CAACmD,EAAajB,EAAQ/B,EAAgBkD,EAASC,IASpDK,EAAgB,SAAC5B,GAEnB,IADA,IAAI6B,EAAkB,GACd3B,EAAI,EAAGA,EAAIF,EAASG,OAAQD,IAChC2B,EAAgBnB,KAAKV,EAASE,GAAG,IAErC,OAAO2B,GAGLC,EAAa,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,0DACfD,QAAaE,IAAPF,EADS,wBAEVG,EAFU,uEAE4DH,EAF5D,2CAEiG1C,GAFjG,SAIS8C,MAAMD,GAJf,cAIRE,EAJQ,gBAKKA,EAASC,OALd,cAKRC,EALQ,iBAMMA,EAAI,MAAU,GAAd,cANN,eAMRC,EANQ,yBAOPA,GAPO,iCASX,MATW,4CAAH,sDAsHJC,MA1Gf,WAAqB,IAAD,EAEqBC,mBAAS,IAF9B,mBAETC,EAFS,KAEEC,EAFF,OAGiBF,qBAHjB,mBAGTG,EAHS,KAGAC,EAHA,KAKVC,EAAWC,cAEjBC,qBAAU,WAEN,IAAMjB,EAnCW,SAACkB,GACtB,IAAMC,EAAiBD,EAAKE,OAAO,KAEnC,OADgBF,EAAKG,MAAMF,EAAiB,GAiC7BG,CAAiBX,GAC5BG,EAAcd,KACf,CAACW,IAGJ,IAAMY,EAAI,uCAAG,WAAOC,GAAP,mCAAAvB,EAAA,6DACTuB,EAAEC,iBADO,SAIc1B,EAAcc,GAJ5B,cAIL9D,EAJK,OAMTgE,EAASjE,EAAcC,IANd,SASY2E,IATZ,UAUc,KADnBzD,EATK,QAUGG,OAVH,mDAWTH,EAAWA,EAAS0D,OAGhB7B,EAAkBD,EAAc5B,GAChCtB,EAAemD,EAAgB1B,OACnC2C,EAASrE,EAAgBC,IAGrBiF,EAAqBzC,EAAiBW,GACtC5D,EAAY0F,EAAmB,GAC/BvF,EAAiBuF,EAAmB,GACpCrF,EAAiBqF,EAAmB,GACpCnF,EAAgBmF,EAAmB,GAEvCb,EAAS9E,EAAaC,IACtB6E,EAAS3E,EAAkBC,IAC3B0E,EAASzE,EAAkBC,IAC3BwE,EAASvE,EAAiBC,IAGtByB,EAAWF,EAAY8B,GACvBjD,EAAY+B,EAAcV,GAC9B6C,EAASnE,EAAaC,IAjCb,4CAAH,sDAoCJ6E,EAAc,WAChB,IAAI1B,EAAKa,EADa,SAKPgB,EALO,gFAKtB,WAA6BC,EAASC,GAAtC,uBAAA9B,EAAA,2DAGO6B,EAAQ1D,QAAU4D,IAHzB,yCAIeF,GAJf,cAUQ3B,EADD4B,EACI,mEAA+DzE,EAA/D,sDAAmH0C,EAAnH,uBAbM,IAaN,sBAA4J+B,GAE5J,mEAA+DzE,EAA/D,sDAAmH0C,EAAnH,uBAfM,KAGjB,SAgB2BI,MAAMD,GAhBjC,cAgBUE,EAhBV,gBAiBuBA,EAASC,OAjBhC,cAiBUC,EAjBV,iBAkBgCA,EAAI,cAlBpC,eAkBU0B,EAlBV,iBAmBuB1B,EAAI,MAAU2B,KAAI,SAAAC,GACjC,MAAO,CAACA,EAAO,QAAP,oCAAiEA,EAAO,QAAP,sCApBjF,WAmBUC,EAnBV,OAwBIN,EAAQnD,KAAKyD,IAGVH,EA3BP,0CA4BeJ,EAAcC,EAASG,IA5BtC,WA+BaA,EA/Bb,0CA+BmCH,GA/BnC,6CALsB,sBAwCtB,OAAOD,EAAc,GAAI,OAGvBQ,EAAU7E,IAEhB,OACI,yBAAK8E,UAAU,YACX,8BACI,2BAAOC,YAAY,8BAA8BpG,KAAK,OAAOqG,GAAG,aAAaC,KAAK,aAAaC,SAAU,SAAAlB,GAAC,OAAIZ,EAAgBY,EAAEmB,OAAOC,QAAQA,MAAOjC,IACtJ,kBAAC,IAAD,CAAY2B,UAAWD,EAAQ1E,WAAYkF,QAAStB,KAExD,4BAAQsB,QAAStB,EAAMqB,MAAM,UAA7B,Y,iBCtNGE,EAjBW,SAAAC,GAAQ,IAAD,EACOrC,mBAAS,MADhB,mBACtBsC,EADsB,KACVC,EADU,KAc7B,OAZAhC,qBAAU,WACR,IAAMiC,EAAgBH,EAAII,QACpBC,EAAiB,IAAIC,KAAe,SAAAC,GACxCA,EAAQC,SAAQ,SAAAC,GACdP,EAAcO,EAAMC,mBAIxB,OADAL,EAAeM,QAAQR,GAChB,WACLE,EAAeO,UAAUT,MAE1B,CAACH,IACGC,GCiLIY,MAlLf,YAAgC,IAAD,EA4CvBC,EACAC,EA7CevD,EAAQ,EAARA,KACbwD,EAASC,mBACTC,EAAaD,mBACbhB,EAAaF,EAAkBmB,GAE/BX,EAAUY,OAAOZ,QAAQ/C,GAG3B4D,EAAc,GAuBdC,EArBsB,WAAO,IAAD,gBAEXd,GAFW,IAE5B,IAAI,EAAJ,qBAA0B,CAAC,IAAnBE,EAAkB,QACtBW,EAAYxF,KAAK6E,EAAM,KAHC,8BAK5BW,EAAYE,OAEZ,IAAIC,EAAa,GACdC,OAAOC,WAAa,MAAKF,EAAa,IAEzCH,EAAcA,EAAY9C,MAAM8C,EAAY/F,OAASkG,GACrD,IACIG,EAAU,EACd,OAAOnB,EAAQoB,QAAO,SAAAC,GAClB,IAAoC,IAAjCR,EAAYlF,QAAQ0F,EAAI,KAAcF,EAAUH,EAE/C,OADAG,IACOE,KAKFC,GACbC,EAAe,GAhCQ,cAiCVT,GAjCU,IAiC3B,IAAI,EAAJ,qBAA6B,CAAC,IAAtBZ,EAAqB,QACzB,GAAGA,EAAM,GAAK,EAAG,CACb,IAAsC,IA7B7B,6BA6BGvE,QAAQuE,EAAM,GAAG,IACzB,SAEJ,IAAIsB,EAAM,GACVA,EAAItB,EAAM,IAAMA,EAAM,GACtBqB,EAAalG,KAAKmG,KAxCC,8BA8C3B,GAA2B,IAAxBD,EAAazG,OAAc,CAC1B,IAD0B,EACtB2G,EAAgB,GADM,cAETF,GAFS,IAE1B,IAAI,EAAJ,qBAA+B,CAAC,IAAxBrB,EAAuB,QAC3BuB,EAAcpG,KAAK6E,EAAMU,OAAOc,KAAKxB,GAAOyB,KAAK,OAH3B,8BAK1BpB,EAAWqB,IAAOH,GAClBjB,EAAWoB,IAAOH,GAoHtB,OAjHA9D,qBAAU,WACN,GAAI+B,EAAJ,CAEamC,YAAUN,GACDO,cADtB,IAEMC,EAAMC,YAAOvB,EAAOZ,SAEpBoC,EAAaC,cACdC,OAAO,IAAIC,IAAIvB,IACfwB,MAAM,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,YAE1EC,EAAe,IAChB5C,EAAW6C,OAAS,MAAKD,EAAe,GAE3C,IAAME,EAASZ,MACVO,OAAO,CAAC5B,EAAUC,IAClB6B,MAAM,CAAC,GAAKC,EAAc,GAAKA,IAEpCP,EACKU,MAAM,QAAS,QACfA,MAAM,SAAU,QAErBV,EAAIW,KAAK,UAAT,cAA2BhD,EAAW6C,MAAtC,YAA+C7C,EAAWiD,SAEvCC,YAAgBrB,GAC9BsB,MAAM,SAAUC,cAAgBC,SAAS,KACzCF,MAAM,UAAWG,cAAeC,QAAO,SAAAC,GAEpC,IADA,IACA,MADatC,OAAOc,KAAKwB,GACzB,eAAyB,CAArB,IAAIC,EAAO,KACX,GAAe,UAAZA,GACa,OAAZA,GACY,OAAZA,GACY,MAAZA,GACY,MAAZA,EAEJ,OAAOX,EAAOvF,EAAKkG,SAG1BN,MAAM,SAAUO,YAAY1D,EAAW6C,MAAQ,EAAG7C,EAAWiD,OAAU,IACvEU,GAAG,QAAQ,WAEZtB,EACKuB,UAAU,SACVrG,KAAKsE,GACLI,KAAK,UACLe,KAAK,QAAS,QACdA,KAAK,KAAK,SAAAa,GAEP,IADA,IACA,MADa3C,OAAOc,KAAK6B,GACzB,eAAyB,CAArB,IAAIJ,EAAO,KACX,GAAe,UAAZA,GACa,OAAZA,GACY,OAAZA,GACY,MAAZA,GACY,MAAZA,EAGJ,OAAOX,EAAOvF,EAAKkG,QAG1BV,MAAM,QAAQ,SAAAc,GAEX,IADA,IACA,MADa3C,OAAOc,KAAK6B,GACzB,eAAyB,CAArB,IAAIJ,EAAO,KACX,GAAe,UAAZA,GACa,OAAZA,GACY,OAAZA,GACY,MAAZA,GACY,MAAZA,EAEJ,OAAOlB,EAAWhF,EAAKkG,QAG9BT,KAAK,MAAM,SAAAa,GAAI,OAAIA,EAAKC,KACxBd,KAAK,MAAM,SAAAa,GAAI,OAAIA,EAAKE,KAC7B1B,EACKuB,UAAU,UACVrG,KAAKsE,GACLI,KAAK,QACLe,KAAK,QAAS,SACdA,KAAK,cAAe,UACpBA,KAAK,aAAa,SAAAa,GAEf,IADA,IACA,MADa3C,OAAOc,KAAK6B,GACzB,eAAyB,CAArB,IAAIJ,EAAO,KACX,GAAe,UAAZA,GACa,OAAZA,GACY,OAAZA,GACY,MAAZA,GACY,MAAZA,EAGJ,OAAOX,EAAOvF,EAAKkG,IAAY,MAGtCT,KAAK,cAAe,aACpBD,MAAM,OAAQ,SACdC,KAAK,cAAe,OACpB5D,MAAK,SAAAyE,GAEF,IADA,IACA,MADa3C,OAAOc,KAAK6B,GACzB,eAAyB,CAArB,IAAIJ,EAAO,KACX,GAAe,UAAZA,GACa,OAAZA,GACY,OAAZA,GACY,MAAZA,GACY,MAAZA,EAEJ,OAAOA,EAAQ,GAAGO,cAAgBP,EAAQpF,MAAM,OAGvD2E,KAAK,KAAK,SAAAa,GAAI,OAAIA,EAAKC,KACvBd,KAAK,KAAK,SAAAa,GAAI,OAAIA,EAAKE,WAGjC,CAAC/D,EAAY6B,EAActE,EAAMuD,EAAUD,IAG1C,yBAAKd,IAAKkB,EAAY3B,UAAU,eAC5B,mDACA,yBAAKS,IAAKgB,MCjJPkD,MAvCf,YAAyD,IAAlCxK,EAAiC,EAAjCA,cAAeF,EAAkB,EAAlBA,eAE5BgJ,EAAa2B,cACdzB,OAAO,EAAE,EAAG,IACZE,MAAM,CAAC,iBAAkB,oBAExBwB,EAAe,CACjBvJ,MAAO2H,EAAWhJ,EAAe,KAGrC6K,QAAQC,IAAI9B,EAAW9I,IAEvB,IAAM6K,EAAc,CAChB1J,MAAO2H,EAAW9I,EAAc,KAGpC,OACI,yBAAK6F,UAAU,eACX,6DACA,yBAAKA,UAAU,iBACX,yBAAKA,UAAU,OAAOyD,MAAOoB,GACxB5K,IAAmBA,EAAe,GAAK,EAAI,IAAM,IAAMA,EAAe,GAAGgL,WAAWlG,MAAM,EAAG,IAElG,yBAAKiB,UAAU,aAAf,WACS/F,EAAe,GADxB,OAIJ,yBAAK+F,UAAU,iBACX,yBAAKA,UAAU,OAAOyD,MAAOuB,GACxB7K,IAAkBA,EAAc,GAAK,EAAI,IAAM,IAAMA,EAAc,GAAG8K,WAAWlG,MAAM,EAAG,IAE/F,yBAAKiB,UAAU,aAAf,WACS7F,EAAc,GADvB,SCdD+K,MAjBf,YAA0C,IAAdtL,EAAa,EAAbA,UAKlB6J,EAAQ,CACVnI,MAJesJ,cACdzB,OAAO,EAAE,GAAI,KACbE,MAAM,CAAC,iBAAkB,mBAEnBJ,CAAWrJ,IAGtB,OACI,yBAAKoG,UAAU,qBACX,iEACA,yBAAKyD,MAAOA,IAAS7J,EAAY,EAAI,IAAM,IAAMA,EAAUqL,WAAWlG,MAAM,EAAG,MCa5EoG,MApBf,WAEI,IAAMvL,EAAYwL,aAAY,SAAAC,GAAK,OAAIA,EAAMzL,UAAUA,aAEjDK,GADiBmL,aAAY,SAAAC,GAAK,OAAIA,EAAMzL,UAAUG,kBACrCqL,aAAY,SAAAC,GAAK,OAAIA,EAAMzL,UAAUK,mBACtDE,EAAgBiL,aAAY,SAAAC,GAAK,OAAIA,EAAMzL,UAAUO,iBAErDI,GADa6K,aAAY,SAAAC,GAAK,OAAIA,EAAM5K,cAC5B2K,aAAY,SAAAC,GAAK,OAAIA,EAAM9K,cAG7C,OAFqB6K,aAAY,SAAAC,GAAK,OAAIA,EAAMzL,UAAUS,gBAEtDT,EAEA,yBAAKoG,UAAU,WACX,kBAAC,EAAD,CAAa7F,cAAeA,EAAeF,eAAgBA,IAC3D,kBAAC,EAAD,CAAkBL,UAAWA,IAC7B,kBAAC,EAAD,CAAaqE,KAAM1D,KALL,MCHX+K,MAXf,WACE,OACE,yBAAKtF,UAAU,OACb,yCACA,uBAAGA,UAAU,cAAb,oCACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEcuF,QACW,cAA7BtD,OAAOuD,SAASC,UAEe,UAA7BxD,OAAOuD,SAASC,UAEhBxD,OAAOuD,SAASC,SAASC,MACvB,2D,sCCVAC,EAAe,CACjB/L,UAAW,EACXG,eAAgB,CAAC,KAAM,MACvBE,eAAgB,GAChBE,cAAe,GACfE,aAAc,GCRHuL,4BAAgB,CAC3BnL,WCJsB,WAAyB,IAAxB4K,EAAuB,uDAAf,GAAIQ,EAAW,uCAC9C,OAAOA,EAAOhM,MACV,IbJuB,kBaKnB,OAAOgM,EAAOpL,WAClB,QACI,OAAO4K,IDAfzL,UDSqB,WAAmC,IAAlCyL,EAAiC,uDAAzBM,EAAcE,EAAW,uCACvD,OAAOA,EAAOhM,MACV,IXjBqB,gBWkBjB,OAAO,2BACAwL,GADP,IAEIzL,UAAWiM,EAAOjM,YAE1B,IXrB2B,sBWsBvB,OAAO,2BACAyL,GADP,IAEItL,eAAgB8L,EAAO9L,iBAE/B,IXzB2B,sBW0BvB,OAAO,2BACAsL,GADP,IAEIpL,eAAgB4L,EAAO5L,iBAE/B,IX7B0B,qBW8BtB,OAAO,2BACAoL,GADP,IAEIlL,cAAe0L,EAAO1L,gBAE9B,IXhCyB,oBWiCrB,OAAO,2BACAkL,GADP,IAEIhL,aAAcwL,EAAOxL,eAE7B,QACI,OAAOgL,ICpCf9K,UENqB,WAAyB,IAAxB8K,EAAuB,uDAAf,GAAIQ,EAAW,uCAC7C,OAAOA,EAAOhM,MACV,IdCqB,gBcAjB,OAAOgM,EAAOtL,UAClB,QACI,OAAO8K,MCAbS,EAAa,CAACC,KAILC,EAFDC,sBAAYC,EAJL,GAIgCC,8BAAoBC,kBAAe,WAAf,EAAmBN,KCE5FO,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUP,MAAOA,GACf,kBAAC,EAAD,QAGJQ,SAASC,eAAe,SNkHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMC,c","file":"static/js/main.025819a4.chunk.js","sourcesContent":["import { \r\n    SET_SENTIMENT, \r\n    SET_SENTIMENT_COUNT, \r\n    SET_HIGHEST_COMMENT, \r\n    SET_LOWEST_COMMENT,\r\n    SET_COMMENT_COUNT\r\n} from './constants'\r\n\r\nexport const setSentiment = sentiment => ({\r\n    type: SET_SENTIMENT,\r\n    sentiment\r\n})\r\n\r\nexport const setSentimentCount = sentimentCount => ({\r\n    type: SET_SENTIMENT_COUNT,\r\n    sentimentCount\r\n})\r\n\r\nexport const setHighestComment = highestComment => ({\r\n    type: SET_HIGHEST_COMMENT,\r\n    highestComment\r\n})\r\n\r\nexport const setLowestComment = lowestComment => ({\r\n    type: SET_LOWEST_COMMENT,\r\n    lowestComment\r\n})\r\n\r\nexport const setCommentCount = commentCount => ({\r\n    type: SET_COMMENT_COUNT,\r\n    commentCount\r\n})","export const SET_VIDEO_TITLE = 'SET_VIDEO_TITLE'\r\nexport const SET_SENTIMENT = 'SET_SENTIMENT'\r\nexport const SET_SENTIMENT_COUNT = 'SET_SENTIMENT_COUNT'\r\nexport const SET_HIGHEST_COMMENT = 'SET_HIGHEST_COMMENT'\r\nexport const SET_LOWEST_COMMENT = 'SET_LOWEST_COMMENT'\r\nexport const SET_KEYCOUNTS = 'SET_KEYCOUNTS'\r\nexport const SET_COMMENT_COUNT = 'SET_COMMENT_COUNT'","import { SET_KEYCOUNTS } from './constants'\r\n\r\nexport const setKeycounts = keyCounts => ({\r\n    type: SET_KEYCOUNTS,\r\n    keyCounts\r\n})","import { SET_VIDEO_TITLE } from './constants'\r\n\r\nexport const setVideoTitle = videoTitle => ({\r\n    type: SET_VIDEO_TITLE,\r\n    videoTitle\r\n})","import React, { useState, useEffect } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport '../styles/settings.css'\r\n\r\nimport SearchIcon from '@material-ui/icons/Search'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\n\r\nimport { \r\n    setSentiment, \r\n    setSentimentCount, \r\n    setHighestComment, \r\n    setLowestComment, \r\n    setCommentCount \r\n} from '../actions/setSentiments'\r\n\r\nimport { setKeycounts } from '../actions/setKeycounts'\r\nimport { setVideoTitle } from '../actions/setVideoTitle'\r\n\r\nvar Analyzer = require('natural').SentimentAnalyzer\r\nvar stemmer = require('natural').PorterStemmer\r\nvar keyword_extractor = require(\"keyword-extractor\")\r\nlet apiKey = process.env.REACT_APP_API_KEY\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    searchIcon: {\r\n      color: 'rgba(128, 128, 128, 0.5)',\r\n      position: 'absolute',\r\n      right: '10px',\r\n      cursor: 'pointer'\r\n    },\r\n}))\r\n\r\nconst getKeywords = (comments) => {\r\n    let keywords = []\r\n\r\n    for(let i = 0; i < comments.length; i++) {\r\n        let extraction = keyword_extractor.extract(comments[i], {\r\n            language:\"english\",\r\n            remove_digits: true,\r\n            return_changed_case:true,\r\n            remove_duplicates: false\r\n        })\r\n        keywords.push(extraction)\r\n    }\r\n    return keywords\r\n}\r\n\r\nconst countKeywords = (keywords) => {\r\n\r\n    // Get all the unique keywords\r\n    let uniqueKeywords = []\r\n    for(let i = 0; i < keywords.length; i++) {\r\n        for(let keyword of keywords[i]) {\r\n            if(keyword) {\r\n                let word = keyword.toLowerCase()    \r\n                uniqueKeywords.indexOf(word) === -1 && uniqueKeywords.push(word)\r\n            }\r\n        }\r\n    }\r\n\r\n    let keyCount = {}\r\n\r\n    for(let i = 0; i < keywords.length; i++) {\r\n        for(let keyword of keywords[i]) {\r\n            keyCount[keyword] && keyCount[keyword]++\r\n            !keyCount[keyword] && (keyCount[keyword] = 1)\r\n        }\r\n    }\r\n    \r\n    return keyCount\r\n}\r\n\r\nconst overallSentiment = (comments) => {\r\n\r\n    let analyzer = new Analyzer(\"English\", stemmer, \"afinn\")\r\n    let length = comments.length\r\n    let sentiments = parseFloat(0)\r\n\r\n    // Counts POS and NEG comments POS/NEG\r\n    let sentimentCount = [0, 0]\r\n\r\n    // Set highest and lowest commentscore\r\n\r\n    let highest = [-10, null]\r\n    let lowest = [10, null]\r\n\r\n    for(let i = 0; i < length; i++) {\r\n\r\n        // Get sentiment number\r\n        let tokenized = comments[i].split(' ')\r\n        const sentiment = parseFloat(analyzer.getSentiment(tokenized))\r\n\r\n        // Add POS or NEG\r\n        sentiment > 0 && sentimentCount[0]++\r\n        sentiment < 0 && sentimentCount[1]++\r\n\r\n        sentiment > highest[0] && (highest[0] = sentiment) && (highest[1] = comments[i])\r\n        sentiment < lowest[0] && (lowest[0] = sentiment) && (lowest[1] = comments[i])\r\n\r\n        // Sometimes NaN is returned so this prevents it from beeing added to the overall score\r\n        if(!isNaN(sentiment)) {\r\n            sentiments += sentiment\r\n        }\r\n    }\r\n    return [sentiments / length, sentimentCount, highest, lowest]\r\n}\r\n\r\nconst shortenToVideoID = (link) => {\r\n    const equalSignIndex = link.search('=')\r\n    const videoID = link.slice(equalSignIndex + 1)\r\n    return videoID\r\n}\r\n\r\nconst cleanComments = (comments) => {\r\n    let cleanedComments = []\r\n    for(let i = 0; i < comments.length; i++) {\r\n        cleanedComments.push(comments[i][0])\r\n    }\r\n    return cleanedComments\r\n}\r\n\r\nconst getVideoTitle = async (ID) => {\r\n    if(ID && ID !== undefined) {\r\n        let url = `https://www.googleapis.com/youtube/v3/videos?part=snippet&id=${ID}&fields=items(id%2Csnippet)&key=${apiKey}`\r\n\r\n        const response = await fetch(url)   \r\n        const data = await response.json()\r\n        const title = await data['items'][0]['snippet']['title']  \r\n        return title\r\n    }\r\n    return null\r\n}\r\n\r\nfunction Settings() {\r\n\r\n    const [videoLink, updateVideoLink] = useState('')\r\n    const [videoID, updateVideoID] = useState()\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        // Get and Update Video ID\r\n        const ID = shortenToVideoID(videoLink)\r\n        updateVideoID(ID)\r\n    }, [videoLink])\r\n\r\n    // Main knot to get all needed information from the api\r\n    const calc = async (e) => {\r\n        e.preventDefault()\r\n\r\n        // Get Video Title\r\n        let videoTitle = await getVideoTitle(videoID)\r\n\r\n        dispatch(setVideoTitle(videoTitle))\r\n\r\n        // Get last 100 comments\r\n        let comments = await getComments()\r\n        if(comments.length === 0) return\r\n        comments = comments.flat()\r\n\r\n        // Extract comments from [comment, likes]\r\n        let cleanedComments = cleanComments(comments)\r\n        let commentCount = cleanedComments.length\r\n        dispatch(setCommentCount(commentCount))\r\n\r\n        // Calculate the sentiment and update\r\n        let sentimentCollector = overallSentiment(cleanedComments)\r\n        let sentiment = sentimentCollector[0]\r\n        let sentimentCount = sentimentCollector[1]\r\n        let highestComment = sentimentCollector[2]\r\n        let lowestComment = sentimentCollector[3]\r\n        \r\n        dispatch(setSentiment(sentiment))\r\n        dispatch(setSentimentCount(sentimentCount))\r\n        dispatch(setHighestComment(highestComment))\r\n        dispatch(setLowestComment(lowestComment))\r\n\r\n        // Get all the keywords from all the comments and count them\r\n        let keywords = getKeywords(cleanedComments)\r\n        let keyCounts = countKeywords(keywords)\r\n        dispatch(setKeycounts(keyCounts))\r\n    }\r\n\r\n    const getComments = () => {\r\n        let ID = videoID\r\n        let maxResults = 100\r\n        let maxSearchLength = 10\r\n        \r\n        async function fetchComments(textArr, token) {\r\n\r\n            // If there are X comments already in array return array\r\n            if(textArr.length >= maxSearchLength / 100) {\r\n                return textArr\r\n            }\r\n\r\n            // Change the url based on if there is a new nextPageToken or not\r\n            let url\r\n            if(token) {\r\n                url = `https://www.googleapis.com/youtube/v3/commentThreads?key=${apiKey}&textFormat=plainText&part=snippet&videoId=${ID}&maxResults=${maxResults}&pageToken=${token}`\r\n            } else {\r\n                url = `https://www.googleapis.com/youtube/v3/commentThreads?key=${apiKey}&textFormat=plainText&part=snippet&videoId=${ID}&maxResults=${maxResults}`\r\n            }\r\n\r\n            // Grab the data and get comment and likecount for comment\r\n            const response = await fetch(url)    \r\n            const data = await response.json()\r\n            const nextPageToken = await data['nextPageToken']\r\n            const text = await data['items'].map(comment => {\r\n                return [comment['snippet']['topLevelComment']['snippet']['textDisplay'], comment['snippet']['topLevelComment']['snippet']['likeCount']]\r\n            })\r\n\r\n            // Push data to array that is passed along\r\n            textArr.push(text)\r\n\r\n            // If there is one more comment page to load grab the nextpagetoken for that site\r\n            if(nextPageToken) {\r\n                return fetchComments(textArr, nextPageToken)\r\n            }\r\n            // Or else just return the array\r\n            else if(!nextPageToken) return textArr\r\n        }\r\n\r\n        \r\n        return fetchComments([], null)\r\n    }\r\n\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <div className=\"settings\">\r\n            <form>\r\n                <input placeholder=\"Enter Youtube Video Link...\" type=\"text\" id=\"video-link\" name=\"video-link\" onChange={e => updateVideoLink(e.target.value)} value={videoLink} />\r\n                <SearchIcon className={classes.searchIcon} onClick={calc}/>\r\n            </form> \r\n            <button onClick={calc} value=\"Search\">Search</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Settings\r\n","import ResizeObserver from \"resize-observer-polyfill\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nconst useResizeObserver = ref => {\r\n    const [dimensions, setDimensions] = useState(null);\r\n    useEffect(() => {\r\n      const observeTarget = ref.current;\r\n      const resizeObserver = new ResizeObserver(entries => {\r\n        entries.forEach(entry => {\r\n          setDimensions(entry.contentRect);\r\n        });\r\n      });\r\n      resizeObserver.observe(observeTarget);\r\n      return () => {\r\n        resizeObserver.unobserve(observeTarget);\r\n      };\r\n    }, [ref]);\r\n    return dimensions;\r\n};\r\n\r\nexport default useResizeObserver","import * as d3 from 'd3'\r\nimport { \r\n    select, \r\n    forceSimulation, \r\n    mouse, \r\n    forceRadial, \r\n    forceX, \r\n    forceY, \r\n    scaleOrdinal, \r\n    forceCollide, \r\n    forceManyBody, \r\n    hierarchy, \r\n    forceCenter } from \"d3\"\r\nimport React, { useRef, useEffect } from \"react\"\r\nimport useResizeObserver from './Resizeobserver'\r\n\r\nfunction Bubblechart({ data }) {\r\n    const svgRef = useRef()\r\n    const wrapperRef = useRef()\r\n    const dimensions = useResizeObserver(wrapperRef)\r\n\r\n    const entries = Object.entries(data)\r\n    const alphabet = 'abcdefghijklmnopqrstuvwxyz'\r\n\r\n    let scoreValues = []\r\n\r\n    const heighest10Entries = () => {\r\n\r\n        for(let entry of entries) {\r\n            scoreValues.push(entry[1])\r\n        }\r\n        scoreValues.sort()\r\n\r\n        let scoreCount = 25\r\n        if(window.innerWidth < 700) scoreCount = 15\r\n\r\n        scoreValues = scoreValues.slice(scoreValues.length - scoreCount)\r\n        const newEntries = []\r\n        let counter = 0\r\n        return entries.filter(arr => {\r\n            if(scoreValues.indexOf(arr[1]) !== -1 && counter < scoreCount) {\r\n                counter++\r\n                return arr\r\n            }\r\n        })\r\n    }\r\n\r\n    let newEntries = heighest10Entries()\r\n    let cleanEntries = []\r\n    for(let entry of newEntries) {\r\n        if(entry[1] > 1) {\r\n            if(alphabet.indexOf(entry[0][0]) === -1){\r\n                continue\r\n            }\r\n            let obj = {}\r\n            obj[entry[0]] = entry[1]\r\n            cleanEntries.push(obj)\r\n        }\r\n    }\r\n\r\n    let minValue\r\n    let maxValue\r\n    if(cleanEntries.length !== 0) {\r\n        let minMaxNumbers = []\r\n        for(let entry of cleanEntries) {\r\n            minMaxNumbers.push(entry[Object.keys(entry).join('')])\r\n        }\r\n        minValue = d3.min(minMaxNumbers)\r\n        maxValue = d3.max(minMaxNumbers)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(!dimensions) return\r\n\r\n        const root = hierarchy(cleanEntries)\r\n        const nodeData = root.descendants()\r\n        const svg = select(svgRef.current)\r\n        \r\n        const colorScale = scaleOrdinal()\r\n            .domain(new Set(scoreValues))\r\n            .range([\"#00e8e8\", \"#F2CB05\", \"#F28705\", \"#D92818\", \"#D94141\", \"#0ba3ff\", \"#6aafda\"])\r\n        \r\n        let scaleBubbles = 1.2\r\n        if(dimensions.width <= 700) scaleBubbles = 1\r\n\r\n        const scaleL = d3.scaleSqrt()\r\n            .domain([minValue, maxValue])\r\n            .range([25 * scaleBubbles, 60 * scaleBubbles])\r\n        \r\n        svg\r\n            .style(\"width\", '100%')\r\n            .style(\"height\", '100%')\r\n\r\n        svg.attr('viewbox', `0 0 ${dimensions.width} ${dimensions.height}`)\r\n\r\n        const simulation = forceSimulation(cleanEntries)\r\n            .force(\"charge\", forceManyBody().strength(10))\r\n            .force(\"collide\", forceCollide().radius(d => {\r\n                const keys = Object.keys(d)\r\n                for(let element of keys) {\r\n                    if(element !== 'index' &&\r\n                        element !== 'vx' &&\r\n                        element !== 'vy' &&\r\n                        element !== 'x' && \r\n                        element !== 'y'\r\n                    )\r\n                    return scaleL(data[element])\r\n                }\r\n            }))\r\n            .force('center', forceCenter(dimensions.width / 2, dimensions.height  / 2))\r\n            .on('tick', () => {\r\n                \r\n            svg\r\n                .selectAll('.node')\r\n                .data(cleanEntries)\r\n                .join('circle')\r\n                .attr('class', 'node')\r\n                .attr('r', node => {\r\n                    const keys = Object.keys(node)\r\n                    for(let element of keys) {\r\n                        if(element !== 'index' &&\r\n                            element !== 'vx' &&\r\n                            element !== 'vy' &&\r\n                            element !== 'x' && \r\n                            element !== 'y'\r\n                        )\r\n\r\n                        return scaleL(data[element])\r\n                    }\r\n                })\r\n                .style('fill', node => {\r\n                    const keys = Object.keys(node)\r\n                    for(let element of keys) {\r\n                        if(element !== 'index' &&\r\n                            element !== 'vx' &&\r\n                            element !== 'vy' &&\r\n                            element !== 'x' && \r\n                            element !== 'y'\r\n                        )\r\n                        return colorScale(data[element])\r\n                    }\r\n                })\r\n                .attr('cx', node => node.x)\r\n                .attr('cy', node => node.y)\r\n            svg\r\n                .selectAll('.label')\r\n                .data(cleanEntries)\r\n                .join('text')\r\n                .attr('class', 'label')\r\n                .attr('text-anchor', 'middle')\r\n                .attr('font-size', node => {\r\n                    const keys = Object.keys(node)\r\n                    for(let element of keys) {\r\n                        if(element !== 'index' &&\r\n                            element !== 'vx' &&\r\n                            element !== 'vy' &&\r\n                            element !== 'x' && \r\n                            element !== 'y'\r\n                        )\r\n\r\n                        return scaleL(data[element]) / 3\r\n                    }\r\n                })\r\n                .attr('font-family', 'Open Sans')\r\n                .style('fill', 'black')\r\n                .attr('font-weight', '600')\r\n                .text(node => {\r\n                    const keys = Object.keys(node)\r\n                    for(let element of keys) {\r\n                        if(element !== 'index' &&\r\n                            element !== 'vx' &&\r\n                            element !== 'vy' &&\r\n                            element !== 'x' && \r\n                            element !== 'y'\r\n                        )\r\n                        return element[0].toUpperCase() + element.slice(1)\r\n                    }\r\n                })\r\n                .attr('x', node => node.x)\r\n                .attr('y', node => node.y)\r\n        })\r\n            \r\n    }, [dimensions, cleanEntries, data, maxValue, minValue])\r\n\r\n    return (\r\n        <div ref={wrapperRef} className=\"bubblechart\">\r\n            <h4>Most used keywords:</h4>\r\n            <svg ref={svgRef}>\r\n\r\n            </svg>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Bubblechart","import React, { useState, useEffect } from 'react'\r\nimport { scaleOrdinal, scaleLinear } from \"d3\"\r\n\r\nfunction MaxComments({ lowestComment, highestComment }) {\r\n\r\n    const colorScale = scaleLinear()\r\n        .domain([-2, 2])\r\n        .range(['rgb(238, 0, 0)', 'rgb(66, 230, 0)'])\r\n\r\n    const styleHighest = {\r\n        color: colorScale(highestComment[0])\r\n    }\r\n\r\n    console.log(colorScale(lowestComment))\r\n\r\n    const styleLowest = {\r\n        color: colorScale(lowestComment[0])\r\n    }\r\n\r\n    return (\r\n        <div className=\"maxcomments\">\r\n            <h4>Highest vs. Lowest Sentiment:</h4>\r\n            <div className=\"max_c_element\">\r\n                <div className=\"text\" style={styleHighest}>\r\n                    {highestComment && (highestComment[0] > 0 ? '+' : '') + highestComment[0].toString().slice(0, 5)}\r\n                </div>\r\n                <div className=\"sentiment\">\r\n                    {`\"${highestComment[1]}\"`}\r\n                </div>\r\n            </div>\r\n            <div className=\"max_c_element\">\r\n                <div className=\"text\" style={styleLowest}>\r\n                    {lowestComment && (lowestComment[0] > 0 ? '+' : '') + lowestComment[0].toString().slice(0, 5)}\r\n                </div>\r\n                <div className=\"sentiment\">\r\n                    {`\"${lowestComment[1]}\"`}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MaxComments\r\n","import React, { useState, useEffect } from 'react'\r\nimport { scaleOrdinal, scaleLinear } from \"d3\"\r\n\r\nfunction AverageSentiment({ sentiment }) {\r\n\r\n    const colorScale = scaleLinear()\r\n        .domain([-.4, .4])\r\n        .range(['rgb(238, 0, 0)', 'rgb(66, 230, 0)'])\r\n    const style = {\r\n        color: colorScale(sentiment)\r\n    }\r\n\r\n    return (\r\n        <div className=\"average_sentiment\">\r\n            <h4>Average Sentiment / 100 comments:</h4>\r\n            <div style={style}>{(sentiment > 0 ? '+' : '') + sentiment.toString().slice(0, 4)}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AverageSentiment\r\n","import React, { useState, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport '../styles/settings.css'\r\nimport Bubblechart from './Bubblechart'\r\nimport MaxComments from './MaxComments'\r\nimport AverageSentiment from './AverageSentiment'\r\nimport Scaleline from './Scaleline'\r\n\r\nfunction Display() {\r\n\r\n    const sentiment = useSelector(state => state.sentiment.sentiment)\r\n    const sentimentCount = useSelector(state => state.sentiment.sentimentCount)\r\n    const highestComment = useSelector(state => state.sentiment.highestComment)\r\n    const lowestComment = useSelector(state => state.sentiment.lowestComment)\r\n    const videoTitle = useSelector(state => state.videoTitle)\r\n    const keyCounts = useSelector(state => state.keyCounts)\r\n    const commentCount = useSelector(state => state.sentiment.commentCount)\r\n\r\n    if(!sentiment) return null\r\n    return (\r\n        <div className=\"Display\">\r\n            <MaxComments lowestComment={lowestComment} highestComment={highestComment} />\r\n            <AverageSentiment sentiment={sentiment} />\r\n            <Bubblechart data={keyCounts} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Display\r\n","import React from 'react'\nimport Settings from './components/Settings'\nimport Display from './components/Display'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Consensus</h1>\n      <p className=\"subheading\">AFINN Youtube Sentiment Analysis</p>\n      <Settings />\n      <Display />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { \r\n    SET_SENTIMENT, \r\n    SET_SENTIMENT_COUNT, \r\n    SET_HIGHEST_COMMENT, \r\n    SET_LOWEST_COMMENT, \r\n    SET_COMMENT_COUNT\r\n} from '../actions/constants'\r\n\r\nconst initialState = {\r\n    sentiment: 0,\r\n    sentimentCount: [null, null],\r\n    highestComment: '',\r\n    lowestComment: '',\r\n    commentCount: 0\r\n}\r\n\r\nexport const sentiment = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case SET_SENTIMENT:\r\n            return {\r\n                ...state,\r\n                sentiment: action.sentiment\r\n            }\r\n        case SET_SENTIMENT_COUNT:\r\n            return {\r\n                ...state,\r\n                sentimentCount: action.sentimentCount\r\n            }\r\n        case SET_HIGHEST_COMMENT:\r\n            return {\r\n                ...state,\r\n                highestComment: action.highestComment\r\n            }\r\n        case SET_LOWEST_COMMENT:\r\n            return {\r\n                ...state,\r\n                lowestComment: action.lowestComment\r\n            }\r\n        case SET_COMMENT_COUNT:\r\n            return {\r\n                ...state,\r\n                commentCount: action.commentCount\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import { combineReducers } from 'redux'\r\nimport { videoTitle } from './videoTitle'\r\nimport { sentiment } from './sentiment'\r\nimport { keyCounts } from './keyCounts'\r\n\r\nexport default combineReducers({\r\n    videoTitle,\r\n    sentiment,\r\n    keyCounts\r\n})","import { SET_VIDEO_TITLE } from '../actions/constants'\r\n\r\nexport const videoTitle = (state = '', action) => {\r\n    switch(action.type) {\r\n        case SET_VIDEO_TITLE:\r\n            return action.videoTitle\r\n        default:\r\n            return state\r\n    }\r\n}","import { SET_KEYCOUNTS } from '../actions/constants'\r\n\r\nexport const keyCounts = (state = {}, action) => {\r\n    switch(action.type) {\r\n        case SET_KEYCOUNTS:\r\n            return action.keyCounts\r\n        default:\r\n            return state\r\n    }\r\n}","import { createStore, applyMiddleware } from 'redux'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport thunk from 'redux-thunk'\r\nimport rootReducer from '../reducers'\r\n\r\nconst initialState = {}\r\n\r\nconst middleware = [thunk]\r\n\r\nconst store = createStore(rootReducer, initialState, composeWithDevTools(applyMiddleware(...middleware)))\r\n\r\nexport default store","import 'react-app-polyfill/ie9'\nimport 'react-app-polyfill/stable'\nimport \"core-js/stable\"\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport store from './store'\nimport { Provider } from 'react-redux'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}